summer-program ::= { variable-declaration 
                    | constant-declaration 
                    | procedure-declaration 
                    | operator-declaration 
                    | class-declaration 
                    | operator-symbol-declaration } .

program-declaration ::= "program" identifier '(' [identifier] ')' [expression] ';' .

operator-symbol-declaration ::= ("monadic" | "dyadic") (  operator-symbol { ',' operator-symbol } ) ';' .

class-declaration ::= "class" identifier formals
"begin" 
    [ subclass-declaration ]
    [ fetch-associations ]
    [ store-associations ]
    { ( variable-declaration 
    | constant-declaration 
    | procedure-declaration 
    | operator-declaration ) }
    ["init" ':' block] 
"end" identifier ';' .

subclass-declaration ::= "subclass" "of" identifier ';' .

fetch-associations ::= "fetch" associations ';' .

store-associations ::= "store" associations ';' .

associations ::=  association { ',' association } .

association ::= field-identifier [ ':' identifier ] .

field-identifier ::= identifier | operator-symbol .

procedure-declaration ::= "proc" identifier formals [ expression] ';' .

operator-declaration ::= "op" operator-symbol formals [expression] ';' .

variable-declaration ::= "var"  ( variable-initialization { ',' variable-initialization }  ';' .

variable-initialization ::= identifier [':=' expression] .

constant-declaration ::= "const" ( constant-initialization { ',' constant-initialization } ) ';' .

constant-initialization ::= identifier ':=' constant-expression .

formals ::= '('  identifier { ',' identifier } )' .

constant ::= string-constant | integer-constant | real-constant .

constant-operator ::= '+' | '-' | '*' | '/' | '%' | '**' | '|||' .

constant-expression ::= simple-constant-expression { (constant-operator constant-expression) } .

simple-constant-expression ::= constant | identifier | '(' constant-expression ')' | '.' simple-constant-expression .

expression ::= dyadic-expression .

monadic-expression ::= { monadic-operator } primary .

monadic-operator ::= '~' | '-' | operator-symbol .

dyadic-operator ::= '**' 
                 | '+' 
		 | '-' 
		 | '*' 
		 | '/' 
		 | '%' 
		 | '|||' 
		 | '|<' 
		 | '<=?' 
		 | '>' 
		 | '>=!' 
		 | '!=' 
		 | '&' 
		 | ')' 
		 | operator-symbol .

dyadic-expression ::= monadic-expression { (dyadic-operator monadic-expression) } .

primary ::= unit (subscript | select) .

unit ::= constant 
        | identifier-or-call 
        | return-expression 
        | if-expression 
        | case-expression 
        | while-expression 
        | for-expression 
        | scan-expression 
        | try-expression 
        | assert-expression 
        | parenthesized-expression 
        | array-expression 
        | table-expression .

identifier-or-call ::= identifier [actuals] .

actuals ::= '('  expression { ',' expression } ')' .

subscript ::= '/' expression ']' .

select ::= '.' identifier [ actuals] .

return-expression ::= "freturn" | "return" ['(' expression ')'] .

while-expression ::= "while" test "do" block "od" .

try-expression ::= "try" ( expression { ',' expression } ) ["until" block] "yrt" .

scan-expression ::= "scan" expression "for" block "rof" .

for-expression ::= "for" identifier "in" expression "do" block "od" .

case-expression ::= "case" expression "of" ( case-entry { ',' case-entry } ) ["default" ':' block] "esac" .

case-entry ::= (  constant-expression { ':' constant-expression } ) block .

assert-expression ::= "assert" expression .

if-expression ::= "if" test "then" block { "elif" test "then" block } ["else" block] FI .

test ::= expression ["fails" | "succeeds"] .

parenthesized-expression ::= '(' block ')' .

block ::= { ( variable-declaration | constant-declaration ) } ( [ expression  { ';' expression } ] ) .

array-expression ::= "array" size-and-default | { "init" array-initialization } | array-initialization .

size-and-default ::= '(' expression ',' expression ')' .

array-initialization ::= '['  expression { ',' expression }  ']' .

table-expression ::= "table" size-and-default ["init" table-initialization ] 
                | table-initialization .

table-initialization ::= '[' (  table-element { ',' table-element }  ) ']' .

table-element ::= expression { ':' expression } .

