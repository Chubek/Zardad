summer-program ::= { variable-declaration 
                    | constant-declaration 
                    | procedure-declaration 
                    | operator-declaration 
                    | class-declaration 
                    | operator-symbol-declaration }*

program-declaration ::= PROGRAM identifier '(' [identifier] ')' [expression] ';'

operator-symbol-declaration ::= (MONADIC | DYADIC) { operator-symbol ',' }+ ';'

class-declaration ::= CLASS identifier formals
BEGIN 
    subclass-declaration 
    fetch-associations 
    store-associations 
    ( variable-declaration 
    | constant-declaration 
    | procedure-declaration 
    | operator-declaration )*
    [INIT ':' block] 
END identifier ';'

subclass-declaration ::= [SUBCLASS OF identifier ';']

fetch-associations ::= [FETCH associations ';']

store-associations ::= [STORE associations ';']

associations ::= { association ',' }+

association ::= field-identifier [ ':' identifier ]

field-identifier ::= identifier | operator-symbol

procedure-declaration ::= PROC identifier formals [| expression] ';'

operator-declaration ::= OP operator-symbol formals [expression] ';'

variable-declaration ::= VAR { variable-initialization ',' }+ ';'

variable-initialization ::= identifier [':=' expression]

constant-declaration ::= CONST { constant-initialization ',' }+ ';'

constant-initialization ::= identifier ':=' constant-expression

formals ::= '(' { identifier ',' }*)'

constant ::= string-constant | integer-constant | real-constant

constant-operator ::= '+' | '-' | '*' | '/' | '%' | '**' | '|||'

constant-expression ::= simple-constant-expression (constant-operator constant-expression)*

simple-constant-expression ::= constant | identifier | '(' constant-expression ')' | '.' simple-constant-expression

expression ::= dyadic-expression

monadic-expression ::= (monadic-operator)* primary

monadic-operator ::= '~' | '-' | operator-symbol

dyadic-operator ::= '**' | '+' | '-' | '*' | '/' | '%' | '|||' | '|<' | '<=?' | '>' | '>=!' | '!=' | '&' | ')' | operator-symbol

dyadic-expression ::= monadic-expression (dyadic-operator monadic-expression)*

primary ::= unit (subscript | select)

unit ::= constant 
        | identifier-or-call 
        | return-expression 
        | if-expression 
        | case-expression 
        | while-expression 
        | for-expression 
        | scan-expression 
        | try-expression 
        | assert-expression 
        | parenthesized-expression 
        | array-expression 
        | table-expression

identifier-or-call ::= identifier [actuals]

actuals ::= '(' { expression ',' }*)'

subscript ::= '/' expression ']'

select ::= '.' identifier [| actuals]

return-expression ::= FRETURN | RETURN ['(' expression ')']

while-expression ::= WHILE test DO block OD

try-expression ::= TRY { expression ',' }+ [UNTIL block] YRT

scan-expression ::= SCAN expression FOR block ROF

for-expression ::= FOR identifier IN expression DO block OD

case-expression ::= CASE expression OF { case-entry ',' }* [DEFAULT ':' block] ESAC

case-entry ::= { constant-expression ':' }+ block

assert-expression ::= ASSERT expression

if-expression ::= IF test THEN block (ELIF test THEN block)+ [ELSE block] FI

test ::= expression [FAILS | SUCCEEDS]

parenthesized-expression ::= '(' block ')'

block ::= (variable-declaration | constant-declaration)* {[expression] ';'}*

array-expression ::= ARRAY size-and-default [| INIT array-initialization } | array-initialization

size-and-default ::= '(' expression ',' expression ')'

array-initialization ::= '[' { expression ',' }* ']'

table-expression ::= TABLE size-and-default [INIT table-initialization ] 
                | table-initialization

table-initialization ::= '[' { table-element ',' }* ']'

table-element ::= {expression ':'}+ ':' expression

